// <auto-generated />
using System;
using Day17Assignment.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Day17Assignment.Migrations.HospitalDB
{
    [DbContext(typeof(HospitalDBContext))]
    partial class HospitalDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Day17Assignment.Models.Assistant", b =>
                {
                    b.Property<int>("AssistantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Assistant_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssistantName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Assistant_Name");

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.HasKey("AssistantId");

                    b.HasIndex("Department");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("Day17Assignment.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Department_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Department_Name");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Day17Assignment.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Doctor_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Department")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Doctor_Name");

                    b.HasKey("DoctorId");

                    b.HasIndex("Department");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Day17Assignment.Models.Drug", b =>
                {
                    b.Property<int>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Drug_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Drug_Name");

                    b.Property<int?>("DrugPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Drug_Price")
                        .HasDefaultValueSql("((50))");

                    b.HasKey("DrugId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("Day17Assignment.Models.DrugTime", b =>
                {
                    b.Property<bool?>("Afternoon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Drug")
                        .HasColumnType("int");

                    b.Property<bool?>("Evening")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Morning")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("Patient")
                        .HasColumnType("int");

                    b.HasIndex("Drug");

                    b.HasIndex("Patient");

                    b.ToTable("Drug_time");
                });

            modelBuilder.Entity("Day17Assignment.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Patient_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PatientAge")
                        .HasColumnType("int")
                        .HasColumnName("Patient_Age");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Patient_Name");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Day17Assignment.Models.Treatment", b =>
                {
                    b.Property<int?>("Assistant1")
                        .HasColumnType("int");

                    b.Property<int?>("Assistant2")
                        .HasColumnType("int");

                    b.Property<int?>("Doctor")
                        .HasColumnType("int");

                    b.Property<string>("Illness")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Patient")
                        .HasColumnType("int");

                    b.Property<string>("Treatment1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Treatment");

                    b.HasIndex("Assistant1");

                    b.HasIndex("Assistant2");

                    b.HasIndex("Doctor");

                    b.HasIndex("Patient");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Day17Assignment.Models.Assistant", b =>
                {
                    b.HasOne("Day17Assignment.Models.Department", "DepartmentNavigation")
                        .WithMany("Assistants")
                        .HasForeignKey("Department")
                        .HasConstraintName("FK_Assistant_department_id");

                    b.Navigation("DepartmentNavigation");
                });

            modelBuilder.Entity("Day17Assignment.Models.Doctor", b =>
                {
                    b.HasOne("Day17Assignment.Models.Department", "DepartmentNavigation")
                        .WithMany("Doctors")
                        .HasForeignKey("Department")
                        .HasConstraintName("FK_Doctor_Department_id");

                    b.Navigation("DepartmentNavigation");
                });

            modelBuilder.Entity("Day17Assignment.Models.DrugTime", b =>
                {
                    b.HasOne("Day17Assignment.Models.Drug", "DrugNavigation")
                        .WithMany()
                        .HasForeignKey("Drug")
                        .HasConstraintName("FK_Drug_time_drug_id");

                    b.HasOne("Day17Assignment.Models.Patient", "PatientNavigation")
                        .WithMany()
                        .HasForeignKey("Patient")
                        .HasConstraintName("FK_Drug_time_patient_id");

                    b.Navigation("DrugNavigation");

                    b.Navigation("PatientNavigation");
                });

            modelBuilder.Entity("Day17Assignment.Models.Treatment", b =>
                {
                    b.HasOne("Day17Assignment.Models.Assistant", "Assistant1Navigation")
                        .WithMany()
                        .HasForeignKey("Assistant1")
                        .HasConstraintName("FK_Treatment_assistant1_Id");

                    b.HasOne("Day17Assignment.Models.Assistant", "Assistant2Navigation")
                        .WithMany()
                        .HasForeignKey("Assistant2")
                        .HasConstraintName("FK_Treatment_assistant2_Id");

                    b.HasOne("Day17Assignment.Models.Doctor", "DoctorNavigation")
                        .WithMany()
                        .HasForeignKey("Doctor")
                        .HasConstraintName("FK_Treatment_doctor_id");

                    b.HasOne("Day17Assignment.Models.Patient", "PatientNavigation")
                        .WithMany()
                        .HasForeignKey("Patient")
                        .HasConstraintName("FK_Treatment_patient_id");

                    b.Navigation("Assistant1Navigation");

                    b.Navigation("Assistant2Navigation");

                    b.Navigation("DoctorNavigation");

                    b.Navigation("PatientNavigation");
                });

            modelBuilder.Entity("Day17Assignment.Models.Department", b =>
                {
                    b.Navigation("Assistants");

                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
